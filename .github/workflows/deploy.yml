
name: Deploy Application and Build APK

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build web app
        run: npm run build

      - name: Verify build output
        run: |
          echo "Checking if dist folder exists..."
          ls -la
          if [ -d "dist" ]; then
            echo "✓ dist folder exists"
            echo "Contents of dist folder:"
            ls -la dist/
            echo "Checking for index.html..."
            if [ -f "dist/index.html" ]; then
              echo "✓ index.html found in dist"
            else
              echo "✗ index.html NOT found in dist"
              exit 1
            fi
          else
            echo "✗ dist folder does not exist"
            exit 1
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install Capacitor Android
        run: npm install @capacitor/android --legacy-peer-deps

      # Use existing capacitor.config.ts instead of creating new one
      - name: Verify Capacitor config
        run: |
          echo "Checking capacitor.config.ts..."
          if [ -f "capacitor.config.ts" ]; then
            echo "✓ capacitor.config.ts exists"
            cat capacitor.config.ts
          else
            echo "✗ capacitor.config.ts missing"
            exit 1
          fi

      # Check if Android platform exists
      - name: Check if Android platform exists
        id: check_android
        run: |
          if [ -d "android" ]; then
            echo "platform_exists=true" >> $GITHUB_OUTPUT
          else
            echo "platform_exists=false" >> $GITHUB_OUTPUT
          fi

      # Add Android platform if needed
      - name: Add Android platform if needed
        if: steps.check_android.outputs.platform_exists == 'false'
        run: npx cap add android

      # Force copy web assets to Android
      - name: Copy web assets to Android
        run: |
          echo "Copying web assets to Android..."
          npx cap copy android
          echo "Assets copied successfully"

      # Sync Capacitor without --force flag (it doesn't exist)
      - name: Sync Capacitor
        run: |
          echo "Syncing Capacitor..."
          npx cap sync android
          echo "Capacitor sync completed"

      # Verify assets were copied correctly
      - name: Verify Android assets
        run: |
          echo "Checking Android assets..."
          ASSETS_PATH="android/app/src/main/assets/public"
          if [ -d "$ASSETS_PATH" ]; then
            echo "✓ Assets folder exists at $ASSETS_PATH"
            echo "Contents of assets folder:"
            ls -la "$ASSETS_PATH"
            if [ -f "$ASSETS_PATH/index.html" ]; then
              echo "✓ index.html found in assets"
            else
              echo "✗ index.html NOT found in assets"
              exit 1
            fi
          else
            echo "✗ Assets folder does not exist at $ASSETS_PATH"
            echo "Checking alternative asset paths..."
            find android/app/src/main -name "assets" -type d
            exit 1
          fi

      # Create proper Gradle project structure
      - name: Create proper Gradle project structure
        run: |
          cd android
          
          # Create settings.gradle if missing
          if [ ! -f "settings.gradle" ]; then
            echo "rootProject.name = 'superleitor'" > settings.gradle
            echo "include ':app'" >> settings.gradle
          fi
          
          # Create build.gradle in root directory if missing
          if [ ! -f "build.gradle" ]; then
            echo "buildscript {
                repositories {
                    google()
                    mavenCentral()
                }
                dependencies {
                    classpath 'com.android.tools.build:gradle:7.3.1'
                }
            }
            
            allprojects {
                repositories {
                    google()
                    mavenCentral()
                }
            }" > build.gradle
          fi
          
          # Make sure app directory exists
          mkdir -p app
          
          # Create gradle wrapper with specific version
          gradle wrapper --gradle-version 7.6
          chmod +x ./gradlew

      # Verify MainActivity exists before building
      - name: Verify MainActivity
        run: |
          MAIN_ACTIVITY_PATH="android/app/src/main/java/com/superleitor/app/MainActivity.java"
          if [ -f "$MAIN_ACTIVITY_PATH" ]; then
            echo "✓ MainActivity.java exists"
            echo "Contents:"
            cat "$MAIN_ACTIVITY_PATH"
          else
            echo "✗ MainActivity.java does not exist"
            echo "Searching for MainActivity..."
            find android -name "MainActivity.java" -type f
            exit 1
          fi

      # Clean and build the Android APK
      - name: Clean and Build Android APK
        run: |
          cd android
          echo "Cleaning previous builds..."
          ./gradlew clean
          echo "Building APK..."
          ./gradlew :app:assembleDebug --stacktrace --info

      # Upload the APK artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: superleitor_01
          path: android/app/build/outputs/apk/debug/superleitor_01-debug.apk

      # Deployment to server (disabled for now)
      - name: Deploy to server
        if: false # Disable server deployment for now
        run: ./deploy.sh
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}

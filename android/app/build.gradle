
apply plugin: 'com.android.application'

android {
    namespace 'com.superleitor.app'
    compileSdkVersion 33
    buildToolsVersion '33.0.2'
    
    defaultConfig {
        applicationId "com.superleitor.app"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "superleitor_01"
    }
    
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'InvalidPackage'
    }
    
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core:1.10.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.webkit:webkit:1.7.0'
    implementation 'com.capacitorjs:core:5.7.4'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.2.0'
    
    // Capacitor dependencies
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')
}

// Ensure APK generation
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug') {
        task.doLast {
            println "=== DEBUG APK BUILD COMPLETED ==="
            def apkDir = file("$buildDir/outputs/apk/debug")
            if (apkDir.exists()) {
                apkDir.listFiles().each { file ->
                    if (file.name.endsWith('.apk')) {
                        println "APK generated: ${file.absolutePath}"
                        println "APK size: ${file.length()} bytes"
                    }
                }
            } else {
                println "APK directory not found: ${apkDir.absolutePath}"
            }
        }
    }
}

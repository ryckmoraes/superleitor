rootProject.name = 'superleitor'
include ':app'

def hasValidBuildGradle(File moduleDir) {
    return moduleDir.exists() && new File(moduleDir, 'build.gradle').exists()
}

println "=== Capacitor Module Detection ==="

// Corrigir caminho relativo para voltar ao root do projeto
def nodeModulesRoot = new File(rootDir, '../node_modules')

// Capacitor Android (obrigatório)
def capacitorAndroidDir = new File(nodeModulesRoot, '@capacitor/android')

if (hasValidBuildGradle(capacitorAndroidDir)) {
    include ':capacitor-android'
    project(':capacitor-android').projectDir = capacitorAndroidDir
    println "✅ Included :capacitor-android"
} else {
    println "❌ Missing :capacitor-android or build.gradle"
    throw new GradleException("Essential Capacitor Android module not found or invalid at: ${capacitorAndroidDir.absolutePath}")
}

// Módulos opcionais
def optionalModules = [
    [name: ':capacitor-app', path: new File(nodeModulesRoot, '@capacitor/app/android')],
    [name: ':capacitor-haptics', path: new File(nodeModulesRoot, '@capacitor/haptics/android')],
    [name: ':capacitor-keyboard', path: new File(nodeModulesRoot, '@capacitor/keyboard/android')],
    [name: ':capacitor-status-bar', path: new File(nodeModulesRoot, '@capacitor/status-bar/android')],
    [name: ':capacitor-splash-screen', path: new File(nodeModulesRoot, '@capacitor/splash-screen/android')],
]

optionalModules.each { module ->
    if (hasValidBuildGradle(module.path)) {
        include module.name
        project(module.name).projectDir = module.path
        println "✅ Included ${module.name}"
    } else {
        println "⚠️  Skipped ${module.name} (not found or invalid build.gradle)"
    }
}

println "=== Capacitor Module Detection Complete ==="
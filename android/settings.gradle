
rootProject.name = 'superleitor'
include ':app'

// Função utilitária para verificar build.gradle válido
def hasValidBuildGradle(File moduleDir) {
    return moduleDir.exists() && new File(moduleDir, 'build.gradle').exists()
}

println "=== Capacitor Module Detection ==="

// Corrigir caminho para node_modules fora da pasta android/
def nodeModulesRoot = new File(rootDir, '../node_modules')

println "Looking for node_modules at: ${nodeModulesRoot.absolutePath}"
println "Node modules exists: ${nodeModulesRoot.exists()}"

if (!nodeModulesRoot.exists()) {
    println "❌ node_modules directory not found at: ${nodeModulesRoot.absolutePath}"
    println "Current directory: ${rootDir.absolutePath}"
    println "Available directories:"
    rootDir.parentFile.listFiles().each { file ->
        if (file.isDirectory()) {
            println "  - ${file.name}"
        }
    }
    throw new GradleException("node_modules directory not found. Please run 'npm install' first.")
}

// Módulo obrigatório do Capacitor
def capacitorAndroidDir = new File(nodeModulesRoot, '@capacitor/android')
println "Looking for Capacitor Android at: ${capacitorAndroidDir.absolutePath}"
println "Capacitor Android exists: ${capacitorAndroidDir.exists()}"

if (capacitorAndroidDir.exists()) {
    println "Contents of @capacitor/android:"
    capacitorAndroidDir.listFiles().each { file ->
        println "  - ${file.name} (${file.isDirectory() ? 'dir' : 'file'})"
    }
}

if (hasValidBuildGradle(capacitorAndroidDir)) {
    include ':capacitor-android'
    project(':capacitor-android').projectDir = capacitorAndroidDir
    println "✅ Included :capacitor-android"
} else {
    println "❌ Missing :capacitor-android or build.gradle"
    println "Directory exists: ${capacitorAndroidDir.exists()}"
    println "Build.gradle exists: ${new File(capacitorAndroidDir, 'build.gradle').exists()}"
    
    // Try to find if @capacitor exists at all
    def capacitorDir = new File(nodeModulesRoot, '@capacitor')
    if (capacitorDir.exists()) {
        println "Found @capacitor directory with contents:"
        capacitorDir.listFiles().each { file ->
            println "  - ${file.name}"
        }
    } else {
        println "No @capacitor directory found in node_modules"
    }
    
    throw new GradleException("Essential Capacitor Android module not found or invalid at: ${capacitorAndroidDir.absolutePath}")
}

// Módulos opcionais do Capacitor
def optionalModules = [
    [name: ':capacitor-app', path: new File(nodeModulesRoot, '@capacitor/app/android')],
    [name: ':capacitor-haptics', path: new File(nodeModulesRoot, '@capacitor/haptics/android')],
    [name: ':capacitor-keyboard', path: new File(nodeModulesRoot, '@capacitor/keyboard/android')],
    [name: ':capacitor-status-bar', path: new File(nodeModulesRoot, '@capacitor/status-bar/android')],
    [name: ':capacitor-splash-screen', path: new File(nodeModulesRoot, '@capacitor/splash-screen/android')],
]

optionalModules.each { module ->
    if (hasValidBuildGradle(module.path)) {
        include module.name
        project(module.name).projectDir = module.path
        println "✅ Included ${module.name}"
    } else {
        println "⚠️ Skipped ${module.name} (not found or invalid build.gradle)"
    }
}

println "=== Capacitor Module Detection Complete ==="
